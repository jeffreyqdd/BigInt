#include "include/bignum.hpp"
#include "gtest/gtest.h"

TEST(Power, Simple) {
	UnsignedBigInt a = std::string("2");
	UnsignedBigInt b = std::string("2");
	UnsignedBigInt ans = std::string("4");

	UnsignedBigInt c = a ^ b;
	a ^= b;

	ASSERT_EQ(a.to_string(), c.to_string());
	ASSERT_EQ(c.to_string(), ans.to_string());
}

TEST(Power, Simple2) {
	UnsignedBigInt a = std::string("3");
	UnsignedBigInt b = std::string("4");
	UnsignedBigInt ans = std::string("81");

	UnsignedBigInt c = a ^ b;
	a ^= b;

	ASSERT_EQ(a.to_string(), c.to_string());
	ASSERT_EQ(c.to_string(), ans.to_string());
}

TEST(Power, Zero) {
	UnsignedBigInt a = std::string("2");
	UnsignedBigInt b = std::string("0");
	UnsignedBigInt ans = std::string("1");

	UnsignedBigInt c = a ^ b;
	a ^= b;

	ASSERT_EQ(a.to_string(), c.to_string());
	ASSERT_EQ(c.to_string(), ans.to_string());
}

TEST(Power, Hard) {
	UnsignedBigInt a = std::string("43982749");
	UnsignedBigInt b = std::string("398");
	UnsignedBigInt ans = std::string(
		"106263295406564619887177931939692398837003492702974978673781009541733891613551965456995311"
		"825948638326331686446951219306843759884112888857662732379300854418406618314244538728620418"
		"077015345958313149114616182753787980577860742979053670226368727874187731763281741591243775"
		"319322746640340434183651656136840996782924708932332228008366371464159603004986948815206557"
		"915988250332978663801282033135341376034749316653503498682857572903697991666510845144788307"
		"261768202162898167763272080805116151567640268814167684035905553587444014110517531527812425"
		"928466180007061316472941000521791999244668780347484572349339202988251116174485723193245673"
		"478415872397418661109601231623600705144109314740790098246743812118994467295038485782010228"
		"108958326772048089398495446985462987893212813152823636024865506875167987949790230045355557"
		"824040871691987972752645004616454896014302370527667298162372790834287607684833041123595848"
		"920417646781969471800986146727420131040164957138849453606680088147408477116713990163031435"
		"985585633536089995780264407238478930479509424607632362976089003942889221169432939396728259"
		"425398363639071013844568991467433355203605454066795646577815746394697452646407641359027663"
		"294524301400500660036819258869134708598261180990004521332028112653578959664472655429423751"
		"462934108168528558945930643533502781225248603346813763507928703592012104844931866507176364"
		"939218318953265814012027011649093016038806155993870239779369932757979569685541533992970058"
		"851870450985449818933273496177414999111505614542505373437121887956670523808448592682850263"
		"251250601297621933813886846173417033207910964538341452589362815349475400027753990013441083"
		"031009042081125103669782306436252346268302444625893866603523797374131832121814497325016271"
		"547396638657441628706751891123241215330735224593855749095010432431358471813728095408304418"
		"125413492832960640093153636824021046919327052700260150973899392424759132633898874128999909"
		"131386133621571941483956127282942464156685771931850851309289584322245274726139231134002411"
		"326076029818484755432210557171548235391050375589743193276716425253372464587019678175022258"
		"911542896598326374841510791888062708629590058548943601036998292924989005027979832362994979"
		"623769123539243559299041286305830378615770682108697676644724642043773243903047283959596363"
		"478797269427868598342734586903778170339878815296889942235768167435048131983813762444092092"
		"610729247909597485246150194552392704491433905273417482507839525484252009670166063869835471"
		"180439478564106759651558121536894736274555876606120207044444292448757374523756131715880244"
		"078502430627604501350590099732313400345239324607788954200962636378846752049037332053486291"
		"454461088374583174886249231397278752989493584338588092623430186402724853775485488761734257"
		"996769455858072895340844118176381144920213685428733745625065253620719295146545919722987954"
		"473045794016465261486343686442821773583337270079921876747579561191665728355223117891240157"
		"558197859983655113386056699648334166112580696153189339128828756367603655620406709542882814"
		"9929603374979775036564085462347620061822871100308834437968200246418803001");

	UnsignedBigInt c = a ^ b;
	a ^= b;

	ASSERT_EQ(a.to_string(), c.to_string());
	ASSERT_EQ(c.to_string(), ans.to_string());
}

int main(int argc, char** argv) {
	::testing::InitGoogleTest(&argc, argv);
	return RUN_ALL_TESTS();
}