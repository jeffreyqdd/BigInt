#include "include/bignum.hpp"
#include "gtest/gtest.h"

TEST(BigNumTests, InitializationSmall) {
	BigNum num("19");
	ASSERT_EQ(num.to_string(), "19");

	num = BigNum("5");
	ASSERT_EQ(num.to_string(), "5");
}

TEST(BigNumTests, InitializationBig) {
	const std::string big = "1754002340293898989948209384903840923889823";
	BigNum num(big);
	ASSERT_EQ(num.to_string(), big);
}

TEST(BigNumTests, InitializationHuge) {
	const std::string huge =
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"647345242535647758690872346857463257635768576574683457263526376857569065945473665678589655"
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"647345242535647758690872346857463257635768576574683457263526376857569065945473665678589655"
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"647345242535647758690872346857463257635768576574683457263526376857569065945473665678589655"
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"647345242535647758690872346857463257635768576574683457263526376857569065945473665678589655"
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"647345242535647758690872346857463257635768576574683457263526376857569065945473665678589655"
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"647345242535647758690872346857463257635768576574683457263526376857569065945473665678589655"
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"647345242535647758690872346857463257635768576574683457263526376857569065945473665678589655"
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"647345242535647758690872346857463257635768576574683457263526376857569065945473665678589655"
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"647345242535647758690872346857463257635768576574683457263526376857569065945473665678589655"
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"647345242535647758690872346857463257635768576574683457263526376857569065945473665678589655"
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"647345242535647758690872346857463257635768576574683457263526376857569065945473665678589655"
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"647345242535647758690872346857463257635768576574683457263526376857569065945473665678589655"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"647345242535647758690872346857463257635768576574683457263526376857569065945473665678589655"
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"647345242535647758690872346857463257635768576574683457263526376857569065945473665678589655"
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"647345242535647758690872346857463257635768576574683457263526376857569065945473665678589655"
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"647345242535647758690872346857463257635768576574683457263526376857569065945473665678589655"
		"912398427358972839572345981672432832093484856478536231236463745893549548786576454257563578"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"647345242535647758690872346857463257635768576574683457263526376857569065945473665678589655"
		"990834567836482746896594068396743527645623863478680986457682645624365253643798675066584978"
		"64734524253564775869087234685746325763576857657468345726352637685756906594547366567858965"
		"5";

	BigNum num(huge);
	ASSERT_EQ(num.to_string(), huge);
}

int main(int argc, char** argv) {
	::testing::InitGoogleTest(&argc, argv);
	return RUN_ALL_TESTS();
}