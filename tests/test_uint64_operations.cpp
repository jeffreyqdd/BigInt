#include "include/bignum.hpp"
#include "gtest/gtest.h"

#include <iostream>
#include <limits>

TEST(BigNumTests, Initialization) {
	BigNum num;
	ASSERT_EQ(num.to_string(), "0");
}

TEST(BigNumTests, AddWithInt) {
	BigNum num;
	num += 64;

	ASSERT_EQ(num.to_string(), "64");

	BigNum num2 = num + 1;
	ASSERT_EQ(num.to_string(), "64");
	ASSERT_EQ(num2.to_string(), "65");
}

TEST(BigNumTests, AddWithIntBig) {
	BigNum num;
	num += std::numeric_limits<uint64_t>::max();
	num += std::numeric_limits<uint64_t>::max();

	ASSERT_EQ(num.to_string(), "36893488147419103230");

	num += std::numeric_limits<uint64_t>::max();
	num += std::numeric_limits<uint64_t>::max();
	num += std::numeric_limits<uint64_t>::max();
	num += std::numeric_limits<uint64_t>::max();

	ASSERT_EQ(num.to_string(), "110680464442257309690");
}

TEST(BigNumTests, MultiplyWithInt) {
	BigNum num;
	ASSERT_EQ(num.to_string(), "0");

	num += 12;
	num *= 12;
	ASSERT_EQ(num.to_string(), "144");

	BigNum num2 = num * 10;

	ASSERT_EQ(num.to_string(), "144");
	ASSERT_EQ(num2.to_string(), "1440");

	num *= 0;
	ASSERT_EQ(num.to_string(), "0");
}

TEST(BigNumTests, MultiplyWithIntBig) {
	BigNum num;
	num += std::numeric_limits<uint64_t>::max();
	num *= std::numeric_limits<uint64_t>::max();

	ASSERT_EQ(num.to_string(), "340282366920938463426481119284349108225");
}

TEST(BigNumTests, LeftShiftSmall) {
	BigNum num("1");
	num <<= 1;

	ASSERT_EQ(num.to_string(), "2");

	num = BigNum("1");
	num <<= 32;
	ASSERT_EQ(num.to_string(), "4294967296");

	num = BigNum("3278");
	num <<= 8;
	ASSERT_EQ(num.to_string(), "839168");
}

TEST(BigNumTests, LeftShiftBig) {
	BigNum num("1");
	num <<= 64;
	ASSERT_EQ(num.to_string(), "18446744073709551616");

	num = BigNum("327890382472834897243897239842893");
	num <<= 9;
	ASSERT_EQ(num.to_string(), "167879875826091467388875386799561216");

	num = BigNum("2139877894789678342678234678234678233");
	std::cout << num.to_bitstring() << std::endl;
	num <<= 80;
	std::cout << num.to_bitstring() << std::endl;
	ASSERT_EQ(num.to_string(), "2586953637833839107615416827576068078411678939641621677867008");

	num = BigNum("782");
	num <<= 1842;
	ASSERT_EQ(num.to_string(),
			  "245730331262348036271245787990975532837991585125170747560686734412883293602998022242"
			  "561164073590431950561847494836874759871840902528465961799272348570544813584049852648"
			  "001324442948787692923193267398421715805657830400473863307586285840050340297784851710"
			  "751267788195888072162562223157894179566920056083286393606596756022655683923768270133"
			  "188328133355727179458948761734807401170890337300337484631091744404897474709363464087"
			  "317217414243496409768782713407352586867336249452264258239165518206687345318004390200"
			  "673818276607252061871130739410584515662007164970467328");

	num = BigNum("113");
	num <<= 12000;
	ASSERT_EQ(
		num.to_string(),
		"258837031995536888002302710034625213148501588884813188790228949911507412517174662844784816"
		"728360477005766247292556204186655200420573849475466795634151877946156230387388372447186042"
		"602940089989951807234704086222234363277129590962641905251447375524622000007839978430786727"
		"079978944763381229034470562156584994489085355422197940139282311335778990695758999995519361"
		"320263914345253096395317331844552276824618065840228150557367673646716609735533825122461697"
		"689892390537085544212160771024846037017574752872919207334872766650395561747542653287481041"
		"843403187641773505488367837472372865370579708365433788606561261461866649547762677510609188"
		"349208292358180378140923130405669980498119214806983896010062783816234009023620755605287946"
		"036443271196830044230025226575676859613487745386237993464501229892760859157562697722452290"
		"830436671031194808742272212675618441606151849679117359522527789715222890721082631493466103"
		"107129448353316823036272775466060583660417374504671549928253304689510927049755647199948658"
		"765637791856170642881404919525035568648978332248392202073270780479582769714212723306050923"
		"392526058747289303475557460484503407906709542719017703638295620545761995925595540426471684"
		"880722205226342060806427586531622568970276519213015025719775235751243002572286241821432758"
		"268699936938124013821112249616036587114491908220610507844226120864748414581190810875517856"
		"212431837896169830121727111533492490229551241652222415550860437416995547132682391828200747"
		"586642185903993639693395261526288665704098412245852072647692488713118164891341186331028540"
		"372402261457526514336319477608570902073513751777712028704911616671893588418412536168875308"
		"282662430133054423660722609508949518571329569577477293066252591069642377085677188804524118"
		"736859076341729160832524283201312736765776050586531911237459175416918005164420830934149905"
		"500361572451367702759203020395676016930223647479631093514640401393063024358326462436767262"
		"029341986490350533481907150745883553405194313159144627241665069444259211932980220136738475"
		"787582499668855611680691925654933974546400210986865431757056090660076374522423544754489902"
		"695246345276779219004393538624180241290500489010837205242953892471805260123966512236107237"
		"360821568974052510929627166226296312842190932267547264159285658044831641376463916220273242"
		"139032079691955666061521792608724319808587797599263005925983974375542784399456872410739496"
		"014126590272830533002427883946886123764084577599580460523554982833886837029147875695137748"
		"473237747409240656645131843290972608308908941041370526469549646593231592838547088037810291"
		"649561707066460535641341147158824243101257696002640137287110930987951693724518417804066595"
		"529009985756702247701668532873231989378446792775255577759523414188159954140250805464202687"
		"517405880374447205363003419870926733261504513576570961516996029891295295787927045907481618"
		"329448894606838568264414578992194632003068078612920064096104428566199634613304941614580884"
		"436294720762408504383879787907373526041406957314897624328013771193712258250637852994684530"
		"925627589372844475139934727344733587177518144488465932719896465815934186450156289574902194"
		"796731433303219549831706123365700296990023077402473442263339120015135703271298225538229538"
		"444162957426210854401646766156407696867041949808214090043808757395855189571559894532345292"
		"623531293312030975631284587601528283914237202095104869279690425428298473171454708798017711"
		"246886765268073756489908244923111415178346314539574918484926506877413856500697197790198441"
		"884364551842439282862514851638300759480817367342531161034585554269499010425769375801496588"
		"216201435413726873436676593892828119416446353921540624418380985209027997669319973346268983"
		"679317325119488");
}

int main(int argc, char** argv) {
	::testing::InitGoogleTest(&argc, argv);
	return RUN_ALL_TESTS();
}